{"version":3,"sources":["config/express.js"],"names":["express","require","favicon","morgan","compression","bodyParser","methodOverride","cookieParser","errorHandler","path","config","module","exports","app","env","get","set","root","engine","renderFile","use","urlencoded","extended","json","join","static","port"],"mappings":"AAAA;;;;AAIA;;AAEA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,UAAUD,QAAQ,eAAR,CAAd;AACA,IAAIE,SAASF,QAAQ,QAAR,CAAb;AACA,IAAIG,cAAcH,QAAQ,aAAR,CAAlB;AACA,IAAII,aAAaJ,QAAQ,aAAR,CAAjB;AACA,IAAIK,iBAAiBL,QAAQ,iBAAR,CAArB;AACA,IAAIM,eAAeN,QAAQ,eAAR,CAAnB;AACA,IAAIO,eAAeP,QAAQ,cAAR,CAAnB;AACA,IAAIQ,OAAOR,QAAQ,MAAR,CAAX;AACA,IAAIS,SAAST,QAAQ,eAAR,CAAb;;AAEAU,OAAOC,OAAP,GAAiB,UAASC,GAAT,EAAc;AAC7B,MAAIC,MAAMD,IAAIE,GAAJ,CAAQ,KAAR,CAAV;;AAEAF,MAAIG,GAAJ,CAAQ,OAAR,EAAiBN,OAAOO,IAAP,GAAc,eAA/B;AACAJ,MAAIK,MAAJ,CAAW,MAAX,EAAmBjB,QAAQ,KAAR,EAAekB,UAAlC;AACAN,MAAIG,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAH,MAAIO,GAAJ,CAAQhB,aAAR;AACAS,MAAIO,GAAJ,CAAQf,WAAWgB,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAT,MAAIO,GAAJ,CAAQf,WAAWkB,IAAX,EAAR;AACAV,MAAIO,GAAJ,CAAQd,gBAAR;AACAO,MAAIO,GAAJ,CAAQb,cAAR;;AAEA,MAAI,iBAAiBO,GAArB,EAA0B;AACxBD,QAAIO,GAAJ,CAAQlB,QAAQO,KAAKe,IAAL,CAAUd,OAAOO,IAAjB,EAAuB,QAAvB,EAAiC,aAAjC,CAAR,CAAR;AACAJ,QAAIO,GAAJ,CAAQpB,QAAQyB,MAAR,CAAehB,KAAKe,IAAL,CAAUd,OAAOO,IAAjB,EAAuB,QAAvB,CAAf,CAAR;AACAJ,QAAIG,GAAJ,CAAQ,SAAR,EAAmBN,OAAOO,IAAP,GAAc,SAAjC;AACAJ,QAAIO,GAAJ,CAAQjB,OAAO,KAAP,CAAR;AACD;;AAED,MAAI,kBAAkBW,GAAlB,IAAyB,WAAWA,GAAxC,EAA6C;AAC3CD,QAAIO,GAAJ,CAAQnB,QAAQ,oBAAR,EAA8B,EAACyB,MAAK,KAAN,EAA9B,CAAR;AACAb,QAAIO,GAAJ,CAAQpB,QAAQyB,MAAR,CAAehB,KAAKe,IAAL,CAAUd,OAAOO,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACAJ,QAAIO,GAAJ,CAAQpB,QAAQyB,MAAR,CAAehB,KAAKe,IAAL,CAAUd,OAAOO,IAAjB,EAAuB,QAAvB,CAAf,CAAR;AACAJ,QAAIG,GAAJ,CAAQ,SAAR,EAAmB,QAAnB;AACAH,QAAIO,GAAJ,CAAQjB,OAAO,KAAP,CAAR;AACAU,QAAIO,GAAJ,CAAQZ,cAAR,EAN2C,CAMlB;AAC1B;AACF,CA3BD","file":"config/express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nvar express = require('express');\nvar favicon = require('serve-favicon');\nvar morgan = require('morgan');\nvar compression = require('compression');\nvar bodyParser = require('body-parser');\nvar methodOverride = require('method-override');\nvar cookieParser = require('cookie-parser');\nvar errorHandler = require('errorhandler');\nvar path = require('path');\nvar config = require('./environment');\n\nmodule.exports = function(app) {\n  var env = app.get('env');\n\n  app.set('views', config.root + '/server/views');\n  app.engine('html', require('ejs').renderFile);\n  app.set('view engine', 'html');\n  app.use(compression());\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n  app.use(cookieParser());\n  \n  if ('production' === env) {\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n    app.use(express.static(path.join(config.root, 'public')));\n    app.set('appPath', config.root + '/public');\n    app.use(morgan('dev'));\n  }\n\n  if ('development' === env || 'test' === env) {\n    app.use(require('connect-livereload')({port:35712}));\n    app.use(express.static(path.join(config.root, '.tmp')));\n    app.use(express.static(path.join(config.root, 'client')));\n    app.set('appPath', 'client');\n    app.use(morgan('dev'));\n    app.use(errorHandler()); // Error handler - has to be last\n  }\n};\n"],"sourceRoot":"/source/"}